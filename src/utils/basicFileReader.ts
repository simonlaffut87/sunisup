export class BasicFileReader {
  /**
   * Lit un fichier Excel de mani√®re tr√®s basique
   */
  static async readFile(file: File): Promise<{
    success: boolean;
    data?: any;
    error?: string;
  }> {
    console.log('üîç LECTURE BASIQUE DU FICHIER');
    console.log('üìÅ Nom:', file.name);
    console.log('üìè Taille:', file.size, 'bytes');
    console.log('üìã Type:', file.type);

    try {
      // √âtape 1: Lire comme ArrayBuffer
      console.log('üìñ Lecture comme ArrayBuffer...');
      const buffer = await this.readAsArrayBuffer(file);
      console.log('‚úÖ Buffer lu, taille:', buffer.byteLength);

      // √âtape 2: V√©rifier que c'est bien un fichier Excel
      const uint8Array = new Uint8Array(buffer);
      const firstBytes = Array.from(uint8Array.slice(0, 8))
        .map(b => b.toString(16).padStart(2, '0'))
        .join(' ');
      console.log('üîç Premiers bytes:', firstBytes);

      // Signature Excel: 50 4B (PK) pour les fichiers .xlsx
      if (uint8Array[0] !== 0x50 || uint8Array[1] !== 0x4B) {
        throw new Error('Ce n\'est pas un fichier Excel valide');
      }

      console.log('‚úÖ Fichier Excel d√©tect√©');

      // √âtape 3: Essayer de lire avec XLSX de mani√®re tr√®s simple
      console.log('üìä Tentative lecture XLSX...');
      
      // Import dynamique de XLSX
      const XLSX = await import('xlsx');
      console.log('‚úÖ XLSX import√©');

      // Lecture tr√®s basique
      const workbook = XLSX.read(buffer, {
        type: 'buffer',
        cellDates: false,
        cellNF: false,
        raw: true
      });

      console.log('‚úÖ Workbook cr√©√©, feuilles:', workbook.SheetNames);

      if (!workbook.SheetNames.length) {
        throw new Error('Aucune feuille trouv√©e');
      }

      // Prendre la premi√®re feuille
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      console.log('üìã Feuille s√©lectionn√©e:', sheetName);

      // Convertir en JSON tr√®s simple
      const jsonData = XLSX.utils.sheet_to_json(worksheet, {
        header: 1,
        raw: true,
        defval: null
      });

      console.log('‚úÖ Donn√©es extraites:', jsonData.length, 'lignes');
      console.log('üìã Premi√®re ligne (headers):', jsonData[0]);
      console.log('üìã Deuxi√®me ligne (exemple):', jsonData[1]);

      return {
        success: true,
        data: {
          headers: jsonData[0] as string[],
          rows: jsonData.slice(1),
          totalRows: jsonData.length - 1
        }
      };

    } catch (error: any) {
      console.error('‚ùå ERREUR:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Lit un fichier comme ArrayBuffer avec Promise
   */
  private static readAsArrayBuffer(file: File): Promise<ArrayBuffer> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      
      reader.onload = (event) => {
        const result = event.target?.result;
        if (result instanceof ArrayBuffer) {
          resolve(result);
        } else {
          reject(new Error('R√©sultat de lecture invalide'));
        }
      };
      
      reader.onerror = () => reject(new Error('Erreur de lecture du fichier'));
      reader.onabort = () => reject(new Error('Lecture annul√©e'));
      
      reader.readAsArrayBuffer(file);
    });
  }

  /**
   * Traite les donn√©es extraites pour cr√©er le r√©sultat final
   */
  static async processExtractedData(
    extractedData: { headers: string[]; rows: any[][]; totalRows: number },
    participantMapping: any,
    filename: string,
    onLog?: (log: string) => void
  ): Promise<any> {
    console.log('üîÑ TRAITEMENT DES DONN√âES EXTRAITES');
    
    const { headers, rows } = extractedData;
    console.log('üìã Headers:', headers);
    onLog?.(`üìã Headers d√©tect√©s: ${JSON.stringify(headers)}`);
    
    // Trouver la colonne EAN
    const eanIndex = headers.findIndex(h => 
      String(h).toLowerCase().includes('ean')
    );
    onLog?.(`üîç Index colonne EAN: ${eanIndex} (${eanIndex >= 0 ? headers[eanIndex] : 'NON TROUV√âE'})`);
    
    // Recherche des colonnes de co√ªts r√©seau
    const networkCostColumns = {
      utilisationReseau: headers.findIndex((h, index) => {
        const header = String(h).toLowerCase().trim();
        const result = header === 'utilisation du r√©seau ‚Ç¨ htva' || 
                      header === 'utilisation du reseau ‚Ç¨ htva' ||
                      (header.includes('utilisation') && header.includes('r√©seau') && header.includes('htva'));
        if (result) onLog?.(`üîç Utilisation r√©seau trouv√©e: "${h}" (index ${index})`);
        return result;
      }),
      surcharges: headers.findIndex((h, index) => {
        const header = String(h).toLowerCase().trim();
        const result = header === 'surcharges ‚Ç¨ htva' ||
                      (header.includes('surcharges') && header.includes('htva'));
        if (result) onLog?.(`üîç Surcharges trouv√©e: "${h}" (index ${index})`);
        return result;
      }),
      tarifCapacitaire: headers.findIndex((h, index) => {
        const header = String(h).toLowerCase().trim();
        const result = header === 'tarif capac. (>2020) ‚Ç¨ htva' ||
                      header === 'tarif capacitaire ‚Ç¨ htva' ||
                      (header.includes('tarif') && header.includes('capac') && header.includes('htva'));
        if (result) onLog?.(`üîç Tarif capacitaire trouv√©: "${h}" (index ${index})`);
        return result;
      }),
      tarifMesure: headers.findIndex((h, index) => {
        const header = String(h).toLowerCase().trim();
        const result = header === 'tarif mesure & comptage ‚Ç¨ htva' ||
                      header === 'tarif mesure et comptage ‚Ç¨ htva' ||
                      (header.includes('tarif') && header.includes('mesure') && header.includes('htva'));
        if (result) onLog?.(`üîç Tarif mesure trouv√©: "${h}" (index ${index})`);
        return result;
      }),
      tarifOSP: headers.findIndex((h, index) => {
        const header = String(h).toLowerCase().trim();
        const result = header === 'tarif osp ‚Ç¨ htva' ||
                      (header.includes('tarif') && header.includes('osp') && header.includes('htva'));
        if (result) onLog?.(`üîç Tarif OSP trouv√©: "${h}" (index ${index})`);
        return result;
      }),
      transportELIA: headers.findIndex((h, index) => {
        const header = String(h).toLowerCase().trim();
        const result = header === 'transport - co√ªt elia ‚Ç¨ htva' ||
                      header === 'transport - cout elia ‚Ç¨ htva' ||
                      header === 'transport elia ‚Ç¨ htva' ||
                      (header.includes('transport') && header.includes('elia') && header.includes('htva'));
        if (result) onLog?.(`üîç Transport ELIA trouv√©: "${h}" (index ${index})`);
        return result;
      }),
      redevanceVoirie: headers.findIndex((h, index) => {
        const header = String(h).toLowerCase().trim();
        const result = header === 'redevance de voirie ‚Ç¨ htva' ||
                      header === 'redevance voirie ‚Ç¨ htva' ||
                      (header.includes('redevance') && header.includes('voirie') && header.includes('htva'));
        if (result) onLog?.(`üîç Redevance voirie trouv√©e: "${h}" (index ${index})`);
        return result;
      }),
      totalFraisReseau: headers.findIndex((h, index) => {
        const header = String(h).toLowerCase().trim();
        const result = header === 'total frais de r√©seau ‚Ç¨ htva' ||
                      header === 'total frais de reseau ‚Ç¨ htva' ||
                      header === 'total frais r√©seau ‚Ç¨ htva' ||
                      (header.includes('total') && header.includes('frais') && header.includes('r√©seau') && header.includes('htva'));
        if (result) onLog?.(`üîç Total frais r√©seau trouv√©: "${h}" (index ${index})`);
        return result;
      })
    };
    
    onLog?.(`üîç R√âSUM√â COLONNES CO√õTS R√âSEAU:`);
    Object.entries(networkCostColumns).forEach(([key, index]) => {
      onLog?.(`  ${key}: ${index >= 0 ? `‚úÖ "${headers[index]}" (index ${index})` : '‚ùå NON TROUV√âE'}`);
    });
    
    // Recherche plus flexible des colonnes
    const registreIndex = headers.findIndex(h => {
      const header = String(h).toLowerCase();
      return header.includes('registre') || header.includes('register') || header.includes('compteur');
    });
    onLog?.(`üîç Index colonne Registre: ${registreIndex} (${registreIndex >= 0 ? headers[registreIndex] : 'NON TROUV√âE'})`);
    
    const volumePartageIndex = headers.findIndex(h => {
      const header = String(h).toLowerCase();
      return (header.includes('partage') || header.includes('partagee')) && 
             header.includes('consommation');
    });
    onLog?.(`üîç Index Volume Partag√©: ${volumePartageIndex} (${volumePartageIndex >= 0 ? headers[volumePartageIndex] : 'NON TROUV√âE'})`);
    
    const volumeComplementaireIndex = headers.findIndex(h => {
      const header = String(h).toLowerCase();
      return header.includes('consommation') && 
             (header.includes('reseau') || header.includes('complementaire') || header.includes('residuel'));
    });
    onLog?.(`üîç Index Volume Compl√©mentaire: ${volumeComplementaireIndex} (${volumeComplementaireIndex >= 0 ? headers[volumeComplementaireIndex] : 'NON TROUV√âE'})`);
    
    const injectionPartageIndex = headers.findIndex(h => {
      const header = String(h).toLowerCase();
      return (header.includes('partage') || header.includes('partagee')) && header.includes('injection');
    });
    onLog?.(`üîç Index Injection Partag√©e: ${injectionPartageIndex} (${injectionPartageIndex >= 0 ? headers[injectionPartageIndex] : 'NON TROUV√âE'})`);
    
    const injectionComplementaireIndex = headers.findIndex(h => {
      const header = String(h).toLowerCase();
      return header.includes('injection') && 
             (header.includes('reseau') || header.includes('complementaire') || header.includes('residuelle') || header.includes('residuel'));
    });
    onLog?.(`üîç Index Injection Compl√©mentaire: ${injectionComplementaireIndex} (${injectionComplementaireIndex >= 0 ? headers[injectionComplementaireIndex] : 'NON TROUV√âE'})`);
    
    if (eanIndex === -1) {
      console.error('‚ùå Colonne EAN non trouv√©e dans:', headers);
      onLog?.('‚ùå ERREUR: Colonne EAN non trouv√©e !');
      throw new Error('Colonne EAN non trouv√©e');
    }
    
    console.log('üîç Headers disponibles:', headers);
    console.log('‚úÖ Index des colonnes trouv√©es:', {
      ean: eanIndex,
      registre: registreIndex,
      volumePartage: volumePartageIndex,
      volumeComplementaire: volumeComplementaireIndex,
      injectionPartage: injectionPartageIndex,
      injectionComplementaire: injectionComplementaireIndex
    });
    
    // V√©rifier que les colonnes essentielles sont trouv√©es
    if (volumePartageIndex === -1) {
      console.warn('‚ö†Ô∏è Colonne Volume Partag√© non trouv√©e');
    }
    if (volumeComplementaireIndex === -1) {
      console.warn('‚ö†Ô∏è Colonne Volume Compl√©mentaire non trouv√©e');
    }
    if (injectionPartageIndex === -1) {
      console.warn('‚ö†Ô∏è Colonne Injection Partag√©e non trouv√©e');
    }
    if (injectionComplementaireIndex === -1) {
      console.warn('‚ö†Ô∏è Colonne Injection R√©seau non trouv√©e');
    }
    
    // Structure pour grouper les donn√©es par EAN (HIGH + LOW)
    const eanGroups: { [ean: string]: {
      info: any;
      networkCosts: {
        utilisationReseau: number;
        surcharges: number;
        tarifCapacitaire: number;
        tarifMesure: number;
        tarifOSP: number;
        transportELIA: number;
        redevanceVoirie: number;
        totalFraisReseau: number;
      };
      high: {
        volume_partage: number;
        volume_complementaire: number;
        injection_partagee: number;
        injection_complementaire: number;
      };
      low: {
        volume_partage: number;
        volume_complementaire: number;
        injection_partagee: number;
        injection_complementaire: number;
      };
    } } = {};
    
    const unknownEans = new Set<string>();
    let processedRows = 0;
    
    // LIMITATION: Traiter maximum 1000 lignes pour √©viter les crashes
    const maxRows = Math.min(rows.length, 1000);
    console.log('üìä Groupement de', maxRows, 'lignes par EAN (limit√© √† 1000)...');
    onLog?.(`üìä Traitement limit√© √† ${maxRows} lignes sur ${rows.length} disponibles`);
    
    // Traiter par cycles de 10 lignes pour √©viter les blocages
    for (let cycle = 0; cycle < Math.ceil(maxRows / 10); cycle++) {
      const startIndex = cycle * 10;
      const endIndex = Math.min(startIndex + 10, maxRows);
      
      onLog?.(`üîÑ Cycle ${cycle + 1}: lignes ${startIndex} √† ${endIndex - 1}`);
      
      for (let i = startIndex; i < endIndex; i++) {
      const row = rows[i];
      if (!row || row.length === 0) continue;
      
      const eanRaw = row[eanIndex];
      if (!eanRaw) continue;
      
      const eanCode = String(eanRaw).trim();
      const registre = String(row[registreIndex] || '').trim().toUpperCase();
      
      if (participantMapping[eanCode]) {
        // Initialiser le groupe pour ce participant si n√©cessaire
        if (!eanGroups[eanCode]) {
          eanGroups[eanCode] = {
            info: participantMapping[eanCode],
            networkCosts: {
              utilisationReseau: 0,
              surcharges: 0,
              tarifCapacitaire: 0,
              tarifMesure: 0,
              tarifOSP: 0,
              transportELIA: 0,
              redevanceVoirie: 0,
              totalFraisReseau: 0
            },
            high: {
              volume_partage: 0,
              volume_complementaire: 0,
              injection_partagee: 0,
              injection_complementaire: 0
            },
            low: {
              volume_partage: 0,
              volume_complementaire: 0,
              injection_partagee: 0,
              injection_complementaire: 0
            }
          };
        }
        
        // Extraire les co√ªts r√©seau (une seule fois par EAN, pas par registre)
        if ((registre === 'HI' || registre === 'HIGH') && networkCostColumns.totalFraisReseau >= 0) {
          const parseNetworkCost = (value: any, columnName?: string) => {
            if (!value) return 0;
            
            // Log de debug pour voir la valeur brute
            if (columnName && i < 5) {
              onLog?.(`üîç Parsing ${columnName}: valeur brute = "${value}"`);
            }
            
            const cleaned = String(value)
              .replace(/,/g, '.') // Virgule -> point
              .replace(/\s/g, '') // Supprimer espaces
              .replace(/[^\d.-]/g, '') // Garder seulement chiffres, point et tiret
              .replace(/^-+/, '') // Supprimer les tirets en d√©but
              .replace(/-+$/, ''); // Supprimer les tirets en fin
            
            if (columnName && i < 5) {
              onLog?.(`üîç Parsing ${columnName}: valeur nettoy√©e = "${cleaned}"`);
            }
            
            const parsed = parseFloat(cleaned);
            const result = isNaN(parsed) ? 0 : Math.abs(parsed); // Valeur absolue pour √©viter les n√©gatifs
            
            if (columnName && i < 5) {
              onLog?.(`üîç Parsing ${columnName}: r√©sultat final = ${result}`);
            }
            
            return result;
          };
          
          // Extraire chaque co√ªt r√©seau avec logging d√©taill√©
          const networkCosts = {
            utilisationReseau: networkCostColumns.utilisationReseau >= 0 ? parseNetworkCost(row[networkCostColumns.utilisationReseau], 'utilisationReseau') : 0,
            surcharges: networkCostColumns.surcharges >= 0 ? parseNetworkCost(row[networkCostColumns.surcharges], 'surcharges') : 0,
            tarifCapacitaire: networkCostColumns.tarifCapacitaire >= 0 ? parseNetworkCost(row[networkCostColumns.tarifCapacitaire], 'tarifCapacitaire') : 0,
            tarifMesure: networkCostColumns.tarifMesure >= 0 ? parseNetworkCost(row[networkCostColumns.tarifMesure], 'tarifMesure') : 0,
            tarifOSP: networkCostColumns.tarifOSP >= 0 ? parseNetworkCost(row[networkCostColumns.tarifOSP], 'tarifOSP') : 0,
            transportELIA: networkCostColumns.transportELIA >= 0 ? parseNetworkCost(row[networkCostColumns.transportELIA], 'transportELIA') : 0,
            redevanceVoirie: networkCostColumns.redevanceVoirie >= 0 ? parseNetworkCost(row[networkCostColumns.redevanceVoirie], 'redevanceVoirie') : 0,
            totalFraisReseau: networkCostColumns.totalFraisReseau >= 0 ? parseNetworkCost(row[networkCostColumns.totalFraisReseau], 'totalFraisReseau') : 0,
            // Stocker aussi les valeurs brutes pour debug
            utilisationReseauRaw: networkCostColumns.utilisationReseau >= 0 ? String(row[networkCostColumns.utilisationReseau] || '') : '',
            surchargesRaw: networkCostColumns.surcharges >= 0 ? String(row[networkCostColumns.surcharges] || '') : '',
            tarifCapacitaireRaw: networkCostColumns.tarifCapacitaire >= 0 ? String(row[networkCostColumns.tarifCapacitaire] || '') : '',
            tarifMesureRaw: networkCostColumns.tarifMesure >= 0 ? String(row[networkCostColumns.tarifMesure] || '') : '',
            tarifOSPRaw: networkCostColumns.tarifOSP >= 0 ? String(row[networkCostColumns.tarifOSP] || '') : '',
            transportELIARaw: networkCostColumns.transportELIA >= 0 ? String(row[networkCostColumns.transportELIA] || '') : '',
            redevanceVoirieRaw: networkCostColumns.redevanceVoirie >= 0 ? String(row[networkCostColumns.redevanceVoirie] || '') : '',
            totalFraisReseauRaw: networkCostColumns.totalFraisReseau >= 0 ? String(row[networkCostColumns.totalFraisReseau] || '') : ''
          };
          
          // Assigner aux donn√©es du groupe
          Object.assign(eanGroups[eanCode].networkCosts, networkCosts);
          
          // Log d√©taill√© pour les premi√®res lignes
          if (i < 5) {
            onLog?.(`üí∞ LIGNE ${i} - EAN ${eanCode} (${registre}) - CO√õTS R√âSEAU EXTRAITS:`);
            onLog?.(`üìã Ligne compl√®te: ${JSON.stringify(row)}`);
            Object.entries(networkCosts).forEach(([key, value]) => {
              if (!key.endsWith('Raw')) {
                const rawKey = key + 'Raw';
                const rawValue = networkCosts[rawKey as keyof typeof networkCosts];
                onLog?.(`  ${key}: ${value}‚Ç¨ (valeur brute: "${rawValue}", index colonne: ${networkCostColumns[key as keyof typeof networkCostColumns]})`);
              }
            });
            
            // V√©rifier si au moins un co√ªt est non-nul
            const nonZeroCosts = Object.entries(networkCosts)
              .filter(([key, value]) => !key.endsWith('Raw') && Number(value) > 0);
            if (nonZeroCosts.length > 0) {
              onLog?.(`‚úÖ ${nonZeroCosts.length} co√ªts r√©seau non-nuls trouv√©s pour ${eanCode}`);
            } else {
              onLog?.(`‚ö†Ô∏è ATTENTION: Tous les co√ªts r√©seau sont √† 0 pour ${eanCode}`);
              onLog?.(`üîç V√©rification des index de colonnes pour ${eanCode}:`);
              Object.entries(networkCostColumns).forEach(([key, index]) => {
                if (index >= 0) {
                  onLog?.(`  ${key} (index ${index}): "${row[index]}"`);
                }
              });
            }
          }
        }
        
        // Extraire les valeurs de la ligne
        const volumePartage = parseFloat(String(row[volumePartageIndex] || '0').replace(',', '.').replace(/[^\d.-]/g, '')) || 0;
        const volumeComplementaire = parseFloat(String(row[volumeComplementaireIndex] || '0').replace(',', '.').replace(/[^\d.-]/g, '')) || 0;
        const injectionPartage = parseFloat(String(row[injectionPartageIndex] || '0').replace(',', '.').replace(/[^\d.-]/g, '')) || 0;
        const injectionComplementaire = parseFloat(String(row[injectionComplementaireIndex] || '0').replace(',', '.').replace(/[^\d.-]/g, '')) || 0;
        
        // Debug: afficher les valeurs extraites pour les premi√®res lignes
        if (i < 10) {
          console.log(`üîç LIGNE ${i} - EAN ${eanCode} (${registre}):`);
          onLog?.(`üîç LIGNE ${i} - EAN ${eanCode} (${registre}):`);
          console.log('  üìä Ligne compl√®te:', row);
          onLog?.(`  üìä Ligne compl√®te: ${JSON.stringify(row)}`);
          console.log('  üìç Index des colonnes:', {
            volumePartageIndex,
            volumeComplementaireIndex,
            injectionPartageIndex,
            injectionComplementaireIndex
          });
          onLog?.(`  üìç Index: VP=${volumePartageIndex}, VC=${volumeComplementaireIndex}, IP=${injectionPartageIndex}, IC=${injectionComplementaireIndex}`);
          console.log('  üìã Valeurs brutes extraites:', {
            volumePartage: row[volumePartageIndex],
            volumeComplementaire: row[volumeComplementaireIndex],
            injectionPartage: row[injectionPartageIndex],
            injectionComplementaire: row[injectionComplementaireIndex]
          });
          onLog?.(`  üìã Valeurs brutes: VP="${row[volumePartageIndex]}", VC="${row[volumeComplementaireIndex]}", IP="${row[injectionPartageIndex]}", IC="${row[injectionComplementaireIndex]}"`);
          console.log('  üî¢ Valeurs apr√®s parsing:', {
            volumePartage,
            volumeComplementaire,
            injectionPartage,
            injectionComplementaire
          });
          onLog?.(`  üî¢ Apr√®s parsing: VP=${volumePartage}, VC=${volumeComplementaire}, IP=${injectionPartage}, IC=${injectionComplementaire}`);
          console.log('  ‚úÖ Toutes les valeurs sont-elles 0?', 
            volumePartage === 0 && volumeComplementaire === 0 && injectionPartage === 0 && injectionComplementaire === 0
          );
          onLog?.(`  ‚úÖ Toutes √† 0? ${volumePartage === 0 && volumeComplementaire === 0 && injectionPartage === 0 && injectionComplementaire === 0}`);
          
          // Debug suppl√©mentaire pour voir les valeurs non-nulles
          if (volumePartage > 0 || volumeComplementaire > 0 || injectionPartage > 0 || injectionComplementaire > 0) {
            console.log('üéâ VALEURS NON-NULLES TROUV√âES !');
            onLog?.('üéâ VALEURS NON-NULLES TROUV√âES !');
          }
        }
        
        // Assigner aux bonnes cat√©gories HIGH ou LOW
        const target = registre === 'HI' || registre === 'HIGH' ? eanGroups[eanCode].high : eanGroups[eanCode].low;
        
        target.volume_partage += volumePartage;
        target.volume_complementaire += volumeComplementaire;
        target.injection_partagee += injectionPartage;
        target.injection_complementaire += injectionComplementaire;
        
        processedRows++;
        
        if (i % 100 === 0) {
          console.log(`üìä Ligne ${i}: EAN ${eanCode} (${registre}), VP: ${volumePartage}, VC: ${volumeComplementaire}`);
        }
      } else {
        unknownEans.add(eanCode);
      }
      }
      
      // Petite pause entre les cycles pour √©viter les blocages
      if (cycle < Math.ceil(maxRows / 10) - 1) {
        await new Promise(resolve => setTimeout(resolve, 10));
      }
    }
    
    // √âtape 2: Sommer HIGH + LOW pour chaque EAN et pr√©parer les donn√©es finales
    const participantData: { [ean: string]: any } = {};
    Object.entries(eanGroups).forEach(([eanCode, group]) => {
      participantData[eanCode] = {
        ...group.info,
        data: {
          volume_complementaire: group.high.volume_complementaire + group.low.volume_complementaire,
          volume_partage: group.high.volume_partage + group.low.volume_partage,
          injection_complementaire: group.high.injection_complementaire + group.low.injection_complementaire,
          injection_partagee: group.high.injection_partagee + group.low.injection_partagee
        },
        // IMPORTANT: Inclure les co√ªts r√©seau dans les donn√©es finales
        networkCosts: group.networkCosts
      };
      
      console.log(`‚úÖ EAN ${eanCode} - Total: VP=${participantData[eanCode].data.volume_partage.toFixed(2)}, VC=${participantData[eanCode].data.volume_complementaire.toFixed(2)}`);
      console.log(`üí∞ EAN ${eanCode} - Co√ªts r√©seau inclus:`);
      console.log(`  Utilisation r√©seau: ${group.networkCosts.utilisationReseau.toFixed(2)}‚Ç¨`);
      console.log(`  Surcharges: ${group.networkCosts.surcharges.toFixed(2)}‚Ç¨`);
      console.log(`  Tarif capacitaire: ${group.networkCosts.tarifCapacitaire.toFixed(2)}‚Ç¨`);
      console.log(`  Tarif mesure: ${group.networkCosts.tarifMesure.toFixed(2)}‚Ç¨`);
      console.log(`  Tarif OSP: ${group.networkCosts.tarifOSP.toFixed(2)}‚Ç¨`);
      console.log(`  Transport ELIA: ${group.networkCosts.transportELIA.toFixed(2)}‚Ç¨`);
      console.log(`  Redevance voirie: ${group.networkCosts.redevanceVoirie.toFixed(2)}‚Ç¨`);
      console.log(`  TOTAL: ${group.networkCosts.totalFraisReseau.toFixed(2)}‚Ç¨`);
    });
    
    console.log('‚úÖ Donn√©es accumul√©es par EAN:', Object.keys(participantData).length);
    onLog?.(`‚úÖ ${Object.keys(participantData).length} participants trait√©s avec succ√®s`);
    
    if (unknownEans.size > 0) {
      console.warn('‚ö†Ô∏è EANs non reconnus:', Array.from(unknownEans).slice(0, 10));
      onLog?.(`‚ö†Ô∏è ${unknownEans.size} EANs non reconnus (premiers: ${Array.from(unknownEans).slice(0, 5).join(', ')})`);
    }
    
    return {
      success: true,
      data: participantData,
      stats: {
        totalRows: rows.length,
        processedRows,
        participantsFound: Object.keys(participantData).length,
        unknownEans: unknownEans.size,
        filename
      }
    };
  }
}